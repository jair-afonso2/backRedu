// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using redu.repository.Context;
using System;

namespace redu.repository.Migrations
{
    [DbContext(typeof(IReduContext))]
    partial class IReduContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("redu.domain.Models.alternativa", b =>
                {
                    b.Property<int>("idAlternativas")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("a");

                    b.Property<string>("b");

                    b.Property<string>("c");

                    b.Property<string>("correta")
                        .HasMaxLength(1);

                    b.Property<string>("d");

                    b.Property<string>("e");

                    b.Property<int>("idPergunta");

                    b.HasKey("idAlternativas");

                    b.HasIndex("idPergunta");

                    b.ToTable("alternativas");
                });

            modelBuilder.Entity("redu.domain.Models.aluno", b =>
                {
                    b.Property<int>("idAluno")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cpf")
                        .HasMaxLength(100);

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("idEscola");

                    b.Property<DateTime>("nascimento");

                    b.Property<string>("nomeResponsavel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("idAluno");

                    b.HasIndex("idEscola");

                    b.ToTable("alunos");
                });

            modelBuilder.Entity("redu.domain.Models.aula", b =>
                {
                    b.Property<int>("idAula")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("idDesafio");

                    b.Property<int>("idDisciplina");

                    b.Property<int>("idProfessor");

                    b.Property<int>("idTurma");

                    b.HasKey("idAula");

                    b.HasIndex("idDesafio");

                    b.HasIndex("idDisciplina");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idTurma");

                    b.ToTable("aulas");
                });

            modelBuilder.Entity("redu.domain.Models.desafio", b =>
                {
                    b.Property<int>("idDesafios")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("descricao");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("idDesafios");

                    b.ToTable("desafios");
                });

            modelBuilder.Entity("redu.domain.Models.disciplina", b =>
                {
                    b.Property<int>("idDisciplina")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("idDisciplina");

                    b.ToTable("disciplinas");
                });

            modelBuilder.Entity("redu.domain.Models.escola", b =>
                {
                    b.Property<int>("idEscola")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("cnpj")
                        .HasMaxLength(100);

                    b.Property<string>("endereco")
                        .IsRequired();

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("turmaidTurmas");

                    b.HasKey("idEscola");

                    b.HasIndex("turmaidTurmas");

                    b.ToTable("escolas");
                });

            modelBuilder.Entity("redu.domain.Models.grupo", b =>
                {
                    b.Property<int>("idGrupo")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("ano")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("idTurmas");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("statusGrupo");

                    b.HasKey("idGrupo");

                    b.HasIndex("idTurmas");

                    b.ToTable("grupos");
                });

            modelBuilder.Entity("redu.domain.Models.grupos_aluno", b =>
                {
                    b.Property<int>("idGruposAluno")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("idAluno");

                    b.Property<int>("idGrupo");

                    b.HasKey("idGruposAluno");

                    b.HasIndex("idAluno");

                    b.HasIndex("idGrupo");

                    b.ToTable("grupos_aluno");
                });

            modelBuilder.Entity("redu.domain.Models.pergunta", b =>
                {
                    b.Property<int>("idPergunta")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("idDesafio");

                    b.Property<string>("titulo")
                        .IsRequired();

                    b.HasKey("idPergunta");

                    b.HasIndex("idDesafio");

                    b.ToTable("perguntas");
                });

            modelBuilder.Entity("redu.domain.Models.professore", b =>
                {
                    b.Property<int>("idProfessor")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("nascimento")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("idProfessor");

                    b.ToTable("professores");
                });

            modelBuilder.Entity("redu.domain.Models.resposta", b =>
                {
                    b.Property<int>("idRespostas")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("idAlternativa");

                    b.Property<int>("idAluno");

                    b.Property<string>("opcao")
                        .HasMaxLength(1);

                    b.Property<int>("pontuacao");

                    b.HasKey("idRespostas");

                    b.HasIndex("idAlternativa");

                    b.HasIndex("idAluno");

                    b.ToTable("respostas");
                });

            modelBuilder.Entity("redu.domain.Models.respostas_grupo", b =>
                {
                    b.Property<int>("idRespostasGrupo")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("idAlternativa");

                    b.Property<int>("idGrupo");

                    b.Property<string>("opcao")
                        .HasMaxLength(1);

                    b.HasKey("idRespostasGrupo");

                    b.HasIndex("idAlternativa");

                    b.HasIndex("idGrupo");

                    b.ToTable("respostas_grupos");
                });

            modelBuilder.Entity("redu.domain.Models.turma", b =>
                {
                    b.Property<int>("idTurmas")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("ano")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("idEscola");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("serie")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("statusTurma");

                    b.HasKey("idTurmas");

                    b.HasIndex("idEscola");

                    b.ToTable("turmas");
                });

            modelBuilder.Entity("redu.domain.Models.turmas_aluno", b =>
                {
                    b.Property<int>("idTurmasAluno")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("idAluno");

                    b.Property<int>("idTurma");

                    b.HasKey("idTurmasAluno");

                    b.HasIndex("idAluno");

                    b.HasIndex("idTurma");

                    b.ToTable("turmas_alunos");
                });

            modelBuilder.Entity("redu.domain.Models.usuario", b =>
                {
                    b.Property<int>("idUsuarios")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("flag");

                    b.Property<int>("idAluno_Professor");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sobrenome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("idUsuarios");

                    b.HasIndex("idAluno_Professor");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("redu.domain.Models.alternativa", b =>
                {
                    b.HasOne("redu.domain.Models.pergunta", "pergunta")
                        .WithMany("alternativas")
                        .HasForeignKey("idPergunta")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.aluno", b =>
                {
                    b.HasOne("redu.domain.Models.escola", "escola")
                        .WithMany()
                        .HasForeignKey("idEscola")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.aula", b =>
                {
                    b.HasOne("redu.domain.Models.desafio", "desafio")
                        .WithMany("aulas")
                        .HasForeignKey("idDesafio")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.disciplina", "disciplina")
                        .WithMany("aulas")
                        .HasForeignKey("idDisciplina")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.professore", "professore")
                        .WithMany("aulas")
                        .HasForeignKey("idProfessor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.turma", "turma")
                        .WithMany("aulas")
                        .HasForeignKey("idTurma")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.escola", b =>
                {
                    b.HasOne("redu.domain.Models.turma")
                        .WithMany("escolas")
                        .HasForeignKey("turmaidTurmas")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.grupo", b =>
                {
                    b.HasOne("redu.domain.Models.turma", "turma")
                        .WithMany("grupos")
                        .HasForeignKey("idTurmas")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.grupos_aluno", b =>
                {
                    b.HasOne("redu.domain.Models.aluno", "aluno")
                        .WithMany()
                        .HasForeignKey("idAluno")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.grupo", "grupo")
                        .WithMany()
                        .HasForeignKey("idGrupo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.pergunta", b =>
                {
                    b.HasOne("redu.domain.Models.desafio", "desafio")
                        .WithMany("perguntas")
                        .HasForeignKey("idDesafio")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.resposta", b =>
                {
                    b.HasOne("redu.domain.Models.alternativa", "alternativa")
                        .WithMany("respostas")
                        .HasForeignKey("idAlternativa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.aluno", "aluno")
                        .WithMany("respostas")
                        .HasForeignKey("idAluno")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.respostas_grupo", b =>
                {
                    b.HasOne("redu.domain.Models.alternativa", "alternativa")
                        .WithMany("respostas_grupos")
                        .HasForeignKey("idAlternativa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.grupo", "grupo")
                        .WithMany()
                        .HasForeignKey("idGrupo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.turma", b =>
                {
                    b.HasOne("redu.domain.Models.escola", "escola")
                        .WithMany()
                        .HasForeignKey("idEscola")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.turmas_aluno", b =>
                {
                    b.HasOne("redu.domain.Models.aluno", "aluno")
                        .WithMany("turmas_alunos")
                        .HasForeignKey("idAluno")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.turma", "turma")
                        .WithMany("turmas_alunos")
                        .HasForeignKey("idTurma")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("redu.domain.Models.usuario", b =>
                {
                    b.HasOne("redu.domain.Models.aluno", "aluno")
                        .WithMany("usuarios")
                        .HasForeignKey("idAluno_Professor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("redu.domain.Models.professore", "professore")
                        .WithMany("usuarios")
                        .HasForeignKey("idAluno_Professor")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
